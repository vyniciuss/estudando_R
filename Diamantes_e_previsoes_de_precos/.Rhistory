scale_x_continuous(limits=c(50,80),breaks = seq(50,80,2))
ggplot(aes(x = table, y = cut), data = diamonds) +
geom_point(aes(color = cut)) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(limits=c(40,80),breaks = seq(40,80,2))
tapply(diamonds$table, diamonds$cut, summary)
tapply(diamonds$table, diamonds$cut, summary)
library(ggplot2)
data(diamonds)
ggplot(aes(x= (x * y * z), y = price), data = diamonds) +
geom_point(aes(color = clarity))+
scale_color_brewer(type = 'qual')+
scale_y_log10()
library(ggplot2)
data(diamonds)
diamonds$volume <- (diamonds$x * diamonds$y * diamonds$z)
diamonds
diamond_99_volume <- subset(diamonds, volume < quantile(diamonds$volume, c(0, 0.99)))
ggplot(aes(x= volume, y = price), data = diamond_99_volume) +
geom_point(aes(color = clarity) )+
scale_color_brewer(type = 'qual')+
scale_y_log10()
ggplot(aes(x= volume, y = price), data = diamond_99_volume) +
geom_point(aes(color = clarity) )+
scale_color_brewer(type = 'div')+
scale_y_log10()
ggplot(aes(x= volume, y = price), data = diamond_99_volume) +
geom_point(aes(color = clarity) ) +
scale_y_log10()  +
scale_color_brewer(type = 'div') +
ggsave('volumeClarity.png')
ggplot(aes(x = volume ,y = price),data = diamonds)+
geom_point(aes(color = clarity))+
ylim(0,quantile(diamonds$volume,0.99))+
scale_y_log10()+
coord_cartesian(xlim = c(0,350))
ggplot(aes(x=volume, y=price), data=diamonds) +
geom_point(aes(color=clarity)) +
scale_y_log10() +
xlim(0,quantile(diamonds$volume,.99)) + #x limit of 0 and 90th percentile of volumes
scale_color_brewer(type = 'div')
ggplot(aes(x=volume, y=price), data=diamonds) +
geom_point(aes(color=clarity)) +
scale_y_log10() +
xlim(0,quantile(diamonds$volume,.99)) + #x limit of 0 and 90th percentile of volumes
scale_color_brewer(type = 'div')
ggplot(aes(x=volume, y=price), data=diamonds) +
geom_point(aes(color=clarity)) +
scale_y_log10() +
xlim(0,quantile(diamonds$volume,.99)) + #x limit of 0 and 90th percentile of volumes
scale_color_brewer(type = 'div') +
ggsave('volumeClarity.png')
diamond_99_volume <- subset(diamonds, volume < quantile(diamonds$volume, c(0, 0.99)) & diamonds$volume != 0)
ggplot(aes(x= volume, y = price), data = diamond_99_volume) +
geom_point(aes(color = clarity) ) +
scale_y_log10()  +
scale_color_brewer(type = 'div') +
ggsave('volumeClarity.png')
ggplot(aes(x=volume, y=price), data= subset(diamonds, volume != 0)) +
geom_point(aes(color=clarity)) +
scale_y_log10() +
xlim(0,quantile(diamonds$volume,.99)) + #x limit de 0 até 99% dos volumes
scale_color_brewer(type = 'div') +
ggsave('volumeClarity.png')
ggplot(aes(x=volume, y=price), data= subset(diamonds, volume != 0)) +
geom_point(aes(color=clarity)) +
scale_y_log10() +
xlim(0,quantile(diamonds$volume,.99)) + #x limit de 0 até 99% dos volumes
scale_color_brewer(type = 'div') +
ggsave('volumeClarity.png')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
pf
pf$prop_initiated <- with(pf, friendships_initiated/friend_count)
pf
pf$prop_initiated <- with(pf, pf$friendships_initiated / pf$friend_count)
pf
pf$prop_initiated <- with(pf, (pf$friendships_initiated / pf$friend_count))
pf
pf$prop_initiated <- pf$friendships_initiated / pf$friend_count
pf
pf$prop_initiated <- (pf$friendships_initiated / pf$friend_count)
pf
pf$prop_initiated <- pf$friendships_initiated/pf$friend_count
pf
subset(pf, !is.na(pf$prop_initiated)
subset(pf, !is.na(pf$prop_initiated))
subset(pf, !is.na(pf$prop_initiated))
length(subset(pf, !is.na(pf$prop_initiated)))
subset(pf, !is.na(pf$prop_initiated))
ed,
pf$year_joined.bucket <- cut(pf$year_joined,
c(2004, 2009, 2011, 2012, 2014))
pf
#cria a variável year_joined tendo como ano base 2014
pf$year_joined <- floor(2014 - pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined,  c(2004, 2009, 2011, 2012, 2014))
ggplot(aes(x = prop_initiated,  y = year_joined.bucket),
subset(pf, !is.na(year_joined.bucket) & !is.na(prop_initiated))) +
geom_line()
ggplot(aes(x = prop_initiated,  y = year_joined.bucket),
subset(pf, !is.na(year_joined.bucket) & !is.na(prop_initiated)))
ggplot(aes(x = prop_initiated,  y = year_joined.bucket),
data = subset(pf, !is.na(year_joined.bucket) & !is.na(prop_initiated))) +
geom_line()
ggplot(aes(x = tenure,  y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket) & !is.na(prop_initiated))) +
geom_line()
ggplot(aes(x = tenure,  y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line()
ggplot(aes(x = tenure,  y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary', fun.y = median)
ggplot(aes(x = tenure,  y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary', fun.y = median) +
ggsave('prop_InitiatesByTenure.png')
ggplot(aes(x = tenure,  y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary', fun.y = median) +
geom_smooth() +
ggsave('prop_InitiatesByTenure.png')
ggplot(aes(x = tenure,  y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary', fun.y = median) +
ggsave('prop_InitiatesByTenure.png')
stat = 'summary', fun.y = median) +
ggplot(aes(x = tenure,  y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary', fun.y = median) +
geom_smooth() +
ggsave('prop_InitiatesByTenureSmooth.png')
summary(subset(pf$friendships_initiated, pf$year_joined>2012))
summary(subset(pf$prop_initiated, pf$year_joined > 2012))
summary(subset(pf$prop_initiated, pf$year_joined > 2012))
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_point(aes(color=color)) +
facet_wrap(~ clarity)
coord_cartesian(ylim = c(0, 1500))
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_point(aes(color=color)) +
facet_wrap(~ clarity)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_point(aes(color=color)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave('pricePerCaratFaceted.png')
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.1, height = 0.1)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave('pricePerCaratFaceted.png')
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.5, height = 0.5)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave('pricePerCaratFaceted.png')
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.9, height = 0.9)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave('pricePerCaratFaceted.png')
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 1, height = 1)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave('pricePerCaratFaceted.png')
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.2, height = 0.2)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave('pricePerCaratFaceted.png')
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.2, height = 0.2)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave('pricePerCaratFaceted.png', width=4, height=4, dpi=300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.2, height = 0.2)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=4, height=4, dpi=300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.2, height = 0.2)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=10, height=10, dpi=300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.5, height = 0.5)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=1, height=1, dpi=300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.5, height = 0.5)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=5, height=5)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.5, height = 0.5)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=4, height=4,dpi = 96)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.5, height = 0.5)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=4, height=4,dpi = 1080)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.1, height = 0.1)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=4, height=4,dpi = 1080)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.3, height = 0.3)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=4, height=4,dpi = 300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.3, height = 0.3)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=1919, height=955 ,dpi = 300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.3, height = 0.3)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=9, height=9 ,dpi = 300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.4, height = 0.4)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=9, height=9 ,dpi = 300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.4, height = 0.4)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=10, height=10 ,dpi = 300)
ggplot(aes(x = cut, y = price/carat),
data = diamonds) +
geom_jitter(aes(color=color), position = position_jitter(width = 0.4, height = 0.4)) +
facet_wrap(~ clarity) +
scale_color_brewer(type = 'div') +
ggsave(file='pricePerCaratFaceted.png', width=11, height=11 ,dpi = 300)
data(diamonds)
library('ggplot2')
data(diamonds)
qplot(data = diamonds, x = carat, y = price,
xlim = c(0, quantile(diamonds$carat, 0.99)),
ylim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = ('black'), shape = 21)
qplot(data = diamonds, x = carat, y = price,
xlim = c(0, quantile(diamonds$carat, 0.99)),
ylim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = ('black'), shape = 21)+
ggsave(file='carat_and_price.png')
ggplot(diamonds, aes(x = carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(diamonds, aes(x = carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), alpha = 1/4) +
stat_smooth(method = 'lm')
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(fill = I('#F79420'), alpha = 1/4) +
stat_smooth(method = 'lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(color = '#F79420', alpha = 1/4) +
stat_smooth(method = 'lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages("scales")
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.')))) +
ggsave(file='matrixDiamonds.png')
('reshape2')
install.packages('dplyr')
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, axisLabels = 'internal',
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.')))) +
ggsave(file='matrixDiamonds.png')
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#f79420')) +
ggtitle('Price (log10)') +
scale_x_log10()
library(gridExtra)
library(grid)
grid.arrange(plot1, plot2, ncol = 2)
grid.arrange(plot1, plot2, ncol = 2)
qplot(carat, price, diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
qplot(carat, price, diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
qplot(carat, price, diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
qplot(x = carat, y = price, diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
qplot(x = carat, y = price, diamonds) +
scale_y_continuous(trans = log10_trans())
diamonds
qplot(x = carat, y = price, data= diamonds) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(x = carat,y =  price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(RColorBrewer)
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# load the ggplot graphics package and the others
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
,
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
data(diamonds)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
library(grid)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
(RColorBrewer)
# install and load the RColorBrewer package
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library('ggplot2')
data(diamonds)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(gridExtra)
library(grid)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
